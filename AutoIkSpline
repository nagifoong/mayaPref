#first, createSplineJointProxy()
#second, runAutospline()

def findTag(name = ""):
    objWithTag = []
    for obj in cmds.ls(type="transform"):
        if "objType" in cmds.listAttr(obj):
            if cmds.getAttr("%s.objType"%obj)==name:
                 objWithTag.append(obj)
                 
    if len(objWithTag)<1:
        return None
    return objWithTag
        

def controllerCv(name = "",type = "cylinder",face = "y"):##controllerCv(name = "test",type="circle",face="x")
    cylinPos = [[-5.467522057371914e-16, 0.9999999999999999, 1.0114885454683018],
     [0.26179249947024297, 0.9999999999999999, 0.9770229090633973],
     [0.5057442727341505, 1.0, 0.8759747760125209],
     [0.7152304095931534, 1.0, 0.7152304095931541],
     [0.8759747760125204, 1.0, 0.5057442727341516],
     [0.9770229090633972, 1.0, 0.26179249947024424],
     [1.0114885454683022, 1.0, 7.567629735980304e-16],
     [0.9770229090633978, 1.0, -0.26179249947024286],
     [0.8759747760125214, 1.0, -0.5057442727341503],
     [0.7152304095931545, 1.0, -0.7152304095931534],
     [0.5057442727341517, 1.0, -0.8759747760125205],
     [0.2617924994702448, 1.0, -0.9770229090633974],
     [-2.9888667252407753e-16, 1.0, -1.0114885454683014],
     [-0.26179249947024325, 1.0, -0.977022909063397],
     [-0.5057442727341508, 1.0, -0.8759747760125204],
     [-0.7152304095931535, 1.0, -0.7152304095931536],
     [-0.8759747760125205, 1.0, -0.505744272734151],
     [-0.9770229090633966, 1.0, -0.2617924994702436],
     [-1.0114885454683016, 1.0, -3.097437695278165e-16],
     [-0.9770229090633971, 1.0, 0.2617924994702431],
     [-0.8759747760125208, 1.0, 0.5057442727341507],
     [-0.7152304095931539, 1.0, 0.7152304095931533],
     [-0.5057442727341512, 1.0, 0.8759747760125204],
     [-0.26179249947024397, 0.9999999999999999, 0.9770229090633972],
     [-5.467522057371914e-16, 0.9999999999999999, 1.0114885454683018],
     [-5.467522057371914e-16, -1.0, 1.0114885454683018],
     [0.26179249947024297, -1.0, 0.9770229090633973],
     [0.5057442727341505, -1.0, 0.8759747760125209],
     [0.7152304095931534, -1.0, 0.7152304095931541],
     [0.7152304095931534, 1.0, 0.7152304095931541],
     [0.7152304095931534, -1.0, 0.7152304095931541],
     [0.8759747760125204, -1.0, 0.5057442727341516],
     [0.9770229090633972, -1.0, 0.26179249947024424],
     [1.0114885454683022, -1.0, 7.567629735980304e-16],
     [1.0114885454683022, 1.0, 7.567629735980304e-16],
     [1.0114885454683022, -1.0, 7.567629735980304e-16],
     [0.9770229090633978, -1.0, -0.26179249947024286],
     [0.8759747760125214, -1.0, -0.5057442727341503],
     [0.7152304095931545, -1.0, -0.7152304095931534],
     [0.7152304095931545, 1.0, -0.7152304095931534],
     [0.7152304095931545, -1.0, -0.7152304095931534],
     [0.5057442727341517, -1.0, -0.8759747760125205],
     [0.2617924994702448, -0.9999999999999999, -0.9770229090633974],
     [-2.9888667252407753e-16, -0.9999999999999999, -1.0114885454683014],
     [-2.9888667252407753e-16, 1.0, -1.0114885454683014],
     [-2.9888667252407753e-16, -0.9999999999999999, -1.0114885454683014],
     [-0.26179249947024325, -0.9999999999999999, -0.977022909063397],
     [-0.5057442727341508, -1.0, -0.8759747760125204],
     [-0.7152304095931535, -1.0, -0.7152304095931536],
     [-0.7152304095931535, 1.0, -0.7152304095931536],
     [-0.7152304095931535, -1.0, -0.7152304095931536],
     [-0.8759747760125205, -1.0, -0.505744272734151],
     [-0.9770229090633966, -1.0, -0.2617924994702436],
     [-1.0114885454683016, -1.0, -3.097437695278165e-16],
     [-1.0114885454683016, 1.0, -3.097437695278165e-16],
     [-1.0114885454683016, -1.0, -3.097437695278165e-16],
     [-0.9770229090633971, -1.0, 0.2617924994702431],
     [-0.8759747760125208, -1.0, 0.5057442727341507],
     [-0.7152304095931539, -1.0, 0.7152304095931533],
     [-0.7152304095931539, 1.0, 0.7152304095931533],
     [-0.7152304095931539, -1.0, 0.7152304095931533],
     [-0.5057442727341512, -1.0, 0.8759747760125204],
     [-0.26179249947024397, -1.0, 0.9770229090633972],
     [-5.467522057371914e-16, -1.0, 1.0114885454683018]]
    mainGrp = cmds.group(name = "CTRL_%s_main_grp"%name,em=1)
    offGrp = cmds.group(name = "CTRL_%s_offset_grp"%name,em=1,p=mainGrp)
    drvGrp = cmds.group(name = "CTRL_%s_DRV_grp"%name,em=1,p=offGrp)
    
    
    if type == "cylinder":
        newCv = cmds.parent(cmds.curve(d=1,p=cylinPos,name = "CTRL_%s"%name),drvGrp)[0]
    if type =="circle":
        newCv = cmds.parent(cmds.circle(ch=0,nr=(0,1,0),r=1.5,name = "CTRL_%s"%name),drvGrp)[0]
        
    if face == "x":
        cmds.rotate(90,newCv,z=1)
        cmds.makeIdentity(newCv,a=1,r=1)
    if face == "z":
        cmds.rotate(90,newCv,x=1)
        cmds.makeIdentity(newCv,a=1,r=1)
    #cmds.select(deselect=1)
    return [mainGrp,newCv]


def createSplineJointProxy():#createSplineJointProxy()
    iterate=1
    cmds.select(deselect = 1)
    jntA = cmds.joint(name = "jnt_spline_proxy"+str(iterate).zfill(2))
    cmds.addAttr(jntA, longName = "ctrlNumber", attributeType = "long", min=3, defaultValue = 3, keyable =1)
    cmds.addAttr(jntA, longName = "drivenJoint", attributeType = "long", min=3, defaultValue = 5, keyable =1)
    cmds.setAttr("%s.type"%jntA,18)
    cmds.setAttr("%s.otherType"%jntA,str(iterate),type = "string")
    cmds.setAttr("%s.drawLabel"%jntA,1)
    iterate +=1
    for ind in range(2):
        jntB = cmds.joint(name = "jnt_spline_proxy"+str(iterate).zfill(2),position = (0,9*iterate,0))
        cmds.setAttr("%s.type"%jntB,18)
        cmds.setAttr("%s.otherType"%jntB,str(iterate),type = "string")
        cmds.setAttr("%s.drawLabel"%jntB,1)        
        iterate +=1
    cmds.select(jntA)
    cmds.warning("Joint orientation of these joint(s) will change to World Orientation .")

def stretchySpline(n):
    if len(n)>1: 
        #n=cmds.ls(sl=1)
        listSpine=["1"]####fix naming problem
        listSpine[0] = n[0]####fix naming problem
        listJnt = n[1:]
        listSpineShape = cmds.listRelatives(listSpine,s=1,ni=1)
        nodeName = listSpine[0].split("_")
        nodeName[0]=nodeName[0]+"_"####fix naming problem
        
        ##Creation
        crvNode = cmds.shadingNode("curveInfo",au=1,n=listSpine[0]+"Info")
        scaleNode = cmds.shadingNode("multiplyDivide",au=1,n=nodeName[0]+"stretch_scaleFix")
        normNode = cmds.shadingNode("multiplyDivide",au=1,n=nodeName[0]+"stretch_normalize")
        sqrtNode = cmds.shadingNode("multiplyDivide",au=1,n=nodeName[0]+"stretch_sqrt")
        invrsNode = cmds.shadingNode("multiplyDivide",au=1,n=nodeName[0]+"stretch_Inverse")
        volNode = cmds.shadingNode("blendColors",au=1,n=nodeName[0]+"stretchVolume_blend")
        volumeUc= cmds.shadingNode("unitConversion",au=1,name = nodeName[0]+"stretchVolume_uc")
        tempCir=cmds.circle (ch=0,n="tempScaleTarget")
        
        ##Set Node Attribute
        cmds.setAttr(scaleNode+".operation",2)
        cmds.setAttr(normNode+".operation",2)
        cmds.setAttr(sqrtNode+".operation",3)
        cmds.setAttr(sqrtNode+".input2X",.5)
        cmds.setAttr(invrsNode+".operation",2)
        cmds.setAttr(invrsNode+".input1X",1)
        cmds.setAttr(volumeUc+".conversionFactor",.1)
        
        ##Connect Attribute
        cmds.connectAttr(listSpineShape[0] + ".worldSpace[0]",crvNode+".inputCurve",f=1)
        cmds.connectAttr(tempCir[0]+".scale",scaleNode+".input2",f=1)
        cmds.connectAttr(crvNode+".arcLength",scaleNode+".input1X",f=1)
        arcLen = cmds.getAttr(crvNode+".arcLength")
        cmds.connectAttr(scaleNode+".outputX",normNode+".input1X",f=1)
        cmds.setAttr(normNode+".input2X",arcLen)
        cmds.connectAttr(normNode+".outputX",sqrtNode+".input1X",f=1)
        cmds.connectAttr(sqrtNode+".outputX",invrsNode+".input2X",f=1)
        cmds.connectAttr(invrsNode+".outputX",volNode+".color1R",f=1)
        cmds.connectAttr(volumeUc+".output",volNode+".blender")
        
        for q in listJnt:
            cmds.connectAttr (normNode+".outputX",q+".scaleX")
            cmds.connectAttr (volNode+".outputR",q+".scaleY")
            cmds.connectAttr (volNode+".outputR",q+".scaleZ")
        return [tempCir[0],scaleNode,volumeUc]    
    else:cmds.warning("Select ikCurve and joint(s) to be stretched.")
    
def runAutospline():
    ctrlJnt = []
    drvnJnt = []
    crvPos = []
    ctrlNum = 3
    drivenNum = 5
    
    name = "jnt_spline"
    for jnt in cmds.ls(type = "joint"):
        attr = cmds.getAttr("%s.otherType"%jnt)
        if attr.isdigit()and "proxy" in jnt:
            jnt = cmds.rename(jnt,jnt.replace("proxy",""))
            ctrlJnt.append(jnt)
            crvPos.append(cmds.xform(jnt,q=1,ws=1,t=1))
            if attr == "0":
               ctrlNum = cmds.getAttr("%s.ctrlNumber"%jnt)
               drivenNum = cmds.getAttr("%s.drivenJoint"%jnt)
               
    
    name = "_".join(ctrlJnt[0].split("_")[:-1])
    newCvPos = []
    cvIter = 0
    for cv in range((len(crvPos)*2)-1):
        if cv%2 == 0:
            newCvPos.append(crvPos[cv/2])
            cvIter+=1
        else:
            
            temp = [(crvPos[cvIter-1][0]+crvPos[cvIter][0])/2,
            (crvPos[cvIter-1][1]+crvPos[cvIter][1])/2,
            (crvPos[cvIter-1][2]+crvPos[cvIter][2])/2]
            newCvPos.append(temp)
            
    cmds.makeIdentity(ctrlJnt[0],apply=1,t=1,r=1,s=1,n=0,pn=1)
    ikCurve = cmds.curve(degree = 3,p = newCvPos,name = "%s_ikCurve"%name.replace("jnt_",""))
    
    ## Curve Skinning and Ajusting it       
    curveSkin = cmds.skinCluster(ctrlJnt,ikCurve,dr=3)[0]
    cvIter = 0
    
    for q in range(cmds.getAttr("%s.cp"%ikCurve,s=1)):
        if q%2==0:
            cmds.skinPercent(curveSkin , "%s.cv[%s]"%(ikCurve,q), tv = (ctrlJnt[cvIter],1))
            cvIter+=1
        else:
            cmds.skinPercent(curveSkin , "%s.cv[%s]"%(ikCurve,q), tv = [(ctrlJnt[cvIter-1],.5),(ctrlJnt[cvIter],.5)]) 
    
    #Create Skin Joints chain
    cmds.select(deselect = 1)
    cvLen = cmds.arclen(ikCurve,ch=0)       
    for drvn in range(int(drivenNum)):
        jnt = cmds.joint(name = "%s_%s_skin"%(name,str(drvn+1).zfill(2)))
        
        if drvn != 0:
            cmds.setAttr("%s.tx"%jnt,cvLen/(drivenNum-1))
        drvnJnt.append(jnt)
    
    splineIk = cmds.ikHandle(startJoint = drvnJnt[0],endEffector = drvnJnt[-1],curve = ikCurve,sol="ikSplineSolver",ccv=False,pcv=False,name = "%s_ikHandle1"%name.replace("jnt_",""))
    splineIk[1] = cmds.rename (splineIk[1],"%s_EFF1"%name.replace("jnt_",""))  
    
    ### Set ikHandle Attribute
    cmds.setAttr( "%s.dTwistControlEnable"%splineIk[0],1)
    cmds.setAttr( "%s.dWorldUpType"%splineIk[0],4)
    cmds.setAttr( "%s.dWorldUpAxis"%splineIk[0],3)
    cmds.setAttr( "%s.dWorldUpVectorZ"%splineIk[0],1)
    cmds.setAttr( "%s.dWorldUpVectorEndZ"%splineIk[0],1)
    cmds.setAttr( "%s.dWorldUpVectorY"%splineIk[0],0)
    cmds.setAttr( "%s.dWorldUpVectorEndY"%splineIk[0],0)
    cmds.connectAttr( '%s.worldMatrix[0]'%ctrlJnt[0],"%s.dWorldUpMatrix"%splineIk[0],f=1)
    cmds.connectAttr( '%s.worldMatrix[0]'%ctrlJnt[-1],"%s.dWorldUpMatrixEnd"%splineIk[0],f=1)
    
    ##skinProxy = cmds.polyPlane(sh=1,sw=1,ch=0,name = "%s_skinProxy"%name.replace("jnt_",""))[0]
    ##cmds.setAttr("%s.translate"%skinProxy,crvPos[0][0],crvPos[0][1],crvPos[0][2],type = "double3")
    
    ##cmds.polyExtrudeFacet(skinProxy,inputCurve = ikCurve,ch=0,keepFacesTogether=1,divisions = (drivenNum+1)*2)
    
    
    ##Create stretchy splineIK
    stretchySel = drvnJnt[:-1]
    stretchySel.insert(0,ikCurve)
    scaleFixUtil = stretchySpline(stretchySel)
    
    #Create Controllers
    fkCtrl = []
    fkGrp = []
    ikCtrl = []
    
    for ind,ctrl in enumerate(ctrlJnt):
        cmds.setAttr("%s.drawLabel"%ctrl,0)
        
        if cmds.getAttr("%s.jointOrientX"%ctrlJnt[0])<45:
            fk = controllerCv(name = "%s_FK"%ctrl.replace("jnt_",""),type="circle")
            ik = controllerCv(name = "%s_IK"%ctrl.replace("jnt_",""),type="cylinder")
            newIkGrp = cmds.parent(ik[0],fk[1])[0]
            pcTemp = cmds.parentConstraint(ctrl,fk[0],mo=0)[0]
            cmds.delete(pcTemp)
        else:
            fk = controllerCv(name = "%s_FK"%ctrl.replace("jnt_",""),type="circle",face="z")
            ik = controllerCv(name = "%s_IK"%ctrl.replace("jnt_",""),type="cylinder",face="z")
            newIkGrp = cmds.parent(ik[0],fk[1])[0]
            pcTemp = cmds.parentConstraint(ctrl,fk[0],mo=0)[0]
            cmds.delete(pcTemp)
            cmds.rotate('-90deg',"%s"%fk[0],r=1,x=1)
        if ind == 0:
            cmds.addAttr(fk[1],longName = "stretchVolume", at="double",min=0,max=10,dv=10,k=1)
            cmds.connectAttr(fk[1]+".stretchVolume",scaleFixUtil[2]+".input")

        #cmds.setAttr("%s.t"%fk[0],crvPos[ind][0],crvPos[ind][1],crvPos[ind][2],type="double3")
        fkGrp.append(fk[0])
        ikCtrl.append(cmds.listRelatives(newIkGrp,ad=1,type="transform")[0])
        #ikGrp.append(newIkGrp)
        if ind>0:
            fkCtrl = cmds.parent(fkGrp[-1],fkCtrl[-1])
            
        fkCtrl.append(fk[1])
        cmds.parentConstraint(ikCtrl[-1],ctrl,mo=1)
        
    ###Clean up
    jntGrp = findTag(name = "jntMainGrp")
    if jntGrp == None:
        jntGrp = [cmds.group(name = "jnt_grp",em=1)]
        cmds.addAttr(jntGrp[0],longName="objType",dataType="string",keyable=1)
        cmds.setAttr("%s.objType"%jntGrp[0],"jntMainGrp",type="string")        
    cmds.parent(ctrlJnt,drvnJnt[0],jntGrp[0])
    
    utilGrp = findTag(name = "utilMainGrp")
    if utilGrp == None:
        utilGrp = [cmds.group(name = "util_grp",em=1)]
        cmds.addAttr(utilGrp[0],longName="objType",dataType="string",keyable=1)
        cmds.setAttr("%s.objType"%jntGrp[0],"utilMainGrp",type="string")
        
    spineUtilGrp = cmds.group(name = "%s_util_grp"%name.replace("jnt_",""),em=1,p=utilGrp[0])
    cmds.parent(ikCurve,splineIk[0],spineUtilGrp)
    
    cmds.connectAttr("%s.s"%jntGrp[0],"%s.input2"%scaleFixUtil[1],f=1)
    cmds.delete(scaleFixUtil[0])

if cmds.objExists("jnt_spline_proxy01"):
    runAutospline()
else:
    createSplineJointProxy()
#
